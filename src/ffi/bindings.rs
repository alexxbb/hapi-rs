/* automatically generated by rust-bindgen 0.66.1 */

// Houdini version 19.5.716
// hapi-sys version 0.1.0

pub const HAPI_POSITION_VECTOR_SIZE: u32 = 3;
pub const HAPI_SCALE_VECTOR_SIZE: u32 = 3;
pub const HAPI_SHEAR_VECTOR_SIZE: u32 = 3;
pub const HAPI_NORMAL_VECTOR_SIZE: u32 = 3;
pub const HAPI_QUATERNION_VECTOR_SIZE: u32 = 4;
pub const HAPI_EULER_VECTOR_SIZE: u32 = 3;
pub const HAPI_UV_VECTOR_SIZE: u32 = 2;
pub const HAPI_COLOR_VECTOR_SIZE: u32 = 4;
pub const HAPI_CV_VECTOR_SIZE: u32 = 4;
pub const HAPI_PRIM_MIN_VERTEX_COUNT: u32 = 1;
pub const HAPI_PRIM_MAX_VERTEX_COUNT: u32 = 16;
pub const HAPI_INVALID_PARM_ID: i32 = -1;
pub const HAPI_ATTRIB_POSITION: &[u8; 2] = b"P\0";
pub const HAPI_ATTRIB_UV: &[u8; 3] = b"uv\0";
pub const HAPI_ATTRIB_UV2: &[u8; 4] = b"uv2\0";
pub const HAPI_ATTRIB_NORMAL: &[u8; 2] = b"N\0";
pub const HAPI_ATTRIB_TANGENT: &[u8; 9] = b"tangentu\0";
pub const HAPI_ATTRIB_TANGENT2: &[u8; 9] = b"tangentv\0";
pub const HAPI_ATTRIB_COLOR: &[u8; 3] = b"Cd\0";
pub const HAPI_ATTRIB_NAME: &[u8; 5] = b"name\0";
pub const HAPI_ATTRIB_INSTANCE: &[u8; 9] = b"instance\0";
pub const HAPI_ATTRIB_ROT: &[u8; 4] = b"rot\0";
pub const HAPI_ATTRIB_SCALE: &[u8; 6] = b"scale\0";
pub const HAPI_UNGROUPED_GROUP_NAME: &[u8; 18] = b"__ungrouped_group\0";
pub const HAPI_RAW_FORMAT_NAME: &[u8; 9] = b"HAPI_RAW\0";
pub const HAPI_PNG_FORMAT_NAME: &[u8; 4] = b"PNG\0";
pub const HAPI_JPEG_FORMAT_NAME: &[u8; 5] = b"JPEG\0";
pub const HAPI_BMP_FORMAT_NAME: &[u8; 7] = b"Bitmap\0";
pub const HAPI_TIFF_FORMAT_NAME: &[u8; 5] = b"TIFF\0";
pub const HAPI_TGA_FORMAT_NAME: &[u8; 6] = b"Targa\0";
pub const HAPI_DEFAULT_IMAGE_FORMAT_NAME: &[u8; 4] = b"PNG\0";
pub const HAPI_GLOBAL_NODES_NODE_NAME: &[u8; 12] = b"GlobalNodes\0";
pub const HAPI_ENV_HIP: &[u8; 4] = b"HIP\0";
pub const HAPI_ENV_JOB: &[u8; 4] = b"JOB\0";
pub const HAPI_ENV_CLIENT_NAME: &[u8; 17] = b"HAPI_CLIENT_NAME\0";
pub const HAPI_CACHE_COP_COOK: &[u8; 15] = b"COP Cook Cache\0";
pub const HAPI_CACHE_COP_FLIPBOOK: &[u8; 19] = b"COP Flipbook Cache\0";
pub const HAPI_CACHE_IMAGE: &[u8; 12] = b"Image Cache\0";
pub const HAPI_CACHE_OBJ: &[u8; 23] = b"Object Transform Cache\0";
pub const HAPI_CACHE_GL_TEXTURE: &[u8; 21] = b"OpenGL Texture Cache\0";
pub const HAPI_CACHE_GL_VERTEX: &[u8; 20] = b"OpenGL Vertex Cache\0";
pub const HAPI_CACHE_SOP: &[u8; 10] = b"SOP Cache\0";
pub const HAPI_CACHE_VEX: &[u8; 15] = b"VEX File Cache\0";
pub const HAPI_ATTRIB_INPUT_CURVE_COORDS: &[u8; 24] = b"hapi_input_curve_coords\0";
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const HAPI_VERSION_HOUDINI_MAJOR: u32 = 19;
pub const HAPI_VERSION_HOUDINI_MINOR: u32 = 5;
pub const HAPI_VERSION_HOUDINI_BUILD: u32 = 716;
pub const HAPI_VERSION_HOUDINI_PATCH: u32 = 0;
pub const HAPI_VERSION_HOUDINI_ENGINE_MAJOR: u32 = 5;
pub const HAPI_VERSION_HOUDINI_ENGINE_MINOR: u32 = 0;
pub const HAPI_VERSION_HOUDINI_ENGINE_API: u32 = 8;
pub type HAPI_Bool = ::std::os::raw::c_char;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type HAPI_UInt8 = u8;
pub type static_assert_unsupported_size_of_uint8 = [::std::os::raw::c_char; 1usize];
pub type HAPI_Int8 = i8;
pub type static_assert_unsupported_size_of_int8 = [::std::os::raw::c_char; 1usize];
pub type HAPI_Int16 = i16;
pub type static_assert_unsupported_size_of_int16 = [::std::os::raw::c_char; 1usize];
pub type HAPI_Int64 = i64;
pub type static_assert_unsupported_size_of_long = [::std::os::raw::c_char; 1usize];
pub type HAPI_ProcessId = ::std::os::raw::c_uint;
pub type HAPI_SessionId = HAPI_Int64;
pub type HAPI_StringHandle = ::std::os::raw::c_int;
pub type HAPI_AssetLibraryId = ::std::os::raw::c_int;
pub type HAPI_NodeId = ::std::os::raw::c_int;
pub type HAPI_ParmId = ::std::os::raw::c_int;
pub type HAPI_PartId = ::std::os::raw::c_int;
pub type HAPI_PDG_WorkItemId = ::std::os::raw::c_int;
pub type HAPI_PDG_WorkitemId = HAPI_PDG_WorkItemId;
pub type HAPI_PDG_GraphContextId = ::std::os::raw::c_int;
pub type HAPI_HIPFileId = ::std::os::raw::c_int;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum License {
    LicenseNone = 0,
    HoudiniEngine = 1,
    LicenseHoudini = 2,
    HoudiniFx = 3,
    EngineIndie = 4,
    HoudiniIndie = 5,
    UnityUnreal = 6,
    LicenseMax = 7,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StatusType {
    CallResult = 0,
    CookResult = 1,
    CookState = 2,
    StatusMax = 3,
}
impl StatusVerbosity {
    pub const All: StatusVerbosity = StatusVerbosity::Statusverbosity2;
}
impl StatusVerbosity {
    pub const Errors: StatusVerbosity = StatusVerbosity::Statusverbosity0;
}
impl StatusVerbosity {
    pub const Warnings: StatusVerbosity = StatusVerbosity::Statusverbosity1;
}
impl StatusVerbosity {
    pub const Messages: StatusVerbosity = StatusVerbosity::Statusverbosity2;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StatusVerbosity {
    Statusverbosity0 = 0,
    Statusverbosity1 = 1,
    Statusverbosity2 = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum HapiResult {
    Success = 0,
    Failure = 1,
    AlreadyInitialized = 2,
    NotInitialized = 3,
    CantLoadfile = 4,
    ParmSetFailed = 5,
    InvalidArgument = 6,
    CantLoadGeo = 7,
    CantGeneratePreset = 8,
    CantLoadPreset = 9,
    AssetDefAlreadyLoaded = 10,
    NoLicenseFound = 110,
    DisallowedNcLicenseFound = 120,
    DisallowedNcAssetWithCLicense = 130,
    DisallowedNcAssetWithLcLicense = 140,
    DisallowedLcAssetWithCLicense = 150,
    DisallowedHengineindieW3partyPlugin = 160,
    AssetInvalid = 200,
    NodeInvalid = 210,
    UserInterrupted = 300,
    InvalidSession = 400,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ErrorCode {
    DefNotFound = 1,
    PythonNodeError = 2,
}
pub type HAPI_ErrorCodeBits = ::std::os::raw::c_int;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SessionType {
    Inprocess = 0,
    Thrift = 1,
    Custom1 = 2,
    Custom2 = 3,
    Custom3 = 4,
    Max = 5,
}
impl State {
    pub const MaxReadyState: State = State::ReadyWithCookErrors;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum State {
    Ready = 0,
    ReadyWithFatalErrors = 1,
    ReadyWithCookErrors = 2,
    StartingCook = 3,
    Cooking = 4,
    StartingLoad = 5,
    Loading = 6,
    Max = 7,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PackedPrimInstancingMode {
    Invalid = -1,
    Disabled = 0,
    Hierarchy = 1,
    Flat = 2,
    Max = 3,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Permissions {
    NonApplicable = 0,
    ReadWrite = 1,
    ReadOnly = 2,
    WriteOnly = 3,
    PermissionsMax = 4,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RampType {
    Invalid = -1,
    Float = 0,
    Color = 1,
    Max = 2,
}
impl ParmType {
    pub const IntStart: ParmType = ParmType::Int;
}
impl ParmType {
    pub const IntEnd: ParmType = ParmType::Button;
}
impl ParmType {
    pub const FloatStart: ParmType = ParmType::Float;
}
impl ParmType {
    pub const FloatEnd: ParmType = ParmType::Color;
}
impl ParmType {
    pub const StringStart: ParmType = ParmType::String;
}
impl ParmType {
    pub const StringEnd: ParmType = ParmType::Node;
}
impl ParmType {
    pub const PathStart: ParmType = ParmType::PathFile;
}
impl ParmType {
    pub const PathEnd: ParmType = ParmType::PathFileImage;
}
impl ParmType {
    pub const NodeStart: ParmType = ParmType::Node;
}
impl ParmType {
    pub const NodeEnd: ParmType = ParmType::Node;
}
impl ParmType {
    pub const ContainerStart: ParmType = ParmType::Folderlist;
}
impl ParmType {
    pub const ContainerEnd: ParmType = ParmType::FolderlistRadio;
}
impl ParmType {
    pub const NonvalueStart: ParmType = ParmType::Folder;
}
impl ParmType {
    pub const NonvalueEnd: ParmType = ParmType::Separator;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ParmType {
    Int = 0,
    Multiparmlist = 1,
    Toggle = 2,
    Button = 3,
    Float = 4,
    Color = 5,
    String = 6,
    PathFile = 7,
    PathFileGeo = 8,
    PathFileImage = 9,
    Node = 10,
    Folderlist = 11,
    FolderlistRadio = 12,
    Folder = 13,
    Label = 14,
    Separator = 15,
    PathFileDir = 16,
    Max = 17,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PrmScriptType {
    TypeInt = 0,
    TypeFloat = 1,
    TypeAngle = 2,
    TypeString = 3,
    TypeFile = 4,
    TypeDirectory = 5,
    TypeImage = 6,
    TypeGeometry = 7,
    TypeToggle = 8,
    TypeButton = 9,
    TypeVector2 = 10,
    TypeVector3 = 11,
    TypeVector4 = 12,
    TypeIntvector2 = 13,
    TypeIntvector3 = 14,
    TypeIntvector4 = 15,
    TypeUv = 16,
    TypeUvw = 17,
    TypeDir = 18,
    TypeColor = 19,
    TypeColor4 = 20,
    TypeOppath = 21,
    TypeOplist = 22,
    TypeObject = 23,
    TypeObjectlist = 24,
    TypeRender = 25,
    TypeSeparator = 26,
    GeometryData = 27,
    ValueDict = 28,
    TypeLabel = 29,
    TypeRgbamask = 30,
    TypeOrdinal = 31,
    RampFlt = 32,
    RampRgb = 33,
    FloatLog = 34,
    IntLog = 35,
    TypeData = 36,
    FloatMinmax = 37,
    IntMinmax = 38,
    IntStartend = 39,
    TypeButtonstrip = 40,
    TypeIconstrip = 41,
    TypeGroupradio = 1000,
    TypeGroupcollapsible = 1001,
    TypeGroupsimple = 1002,
    TypeGroup = 1003,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ChoiceListType {
    None = 0,
    Normal = 1,
    Mini = 2,
    Replace = 3,
    Toggle = 4,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PresetType {
    Invalid = -1,
    Binary = 0,
    Idx = 1,
    Max = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NodeType {
    Any = -1,
    None = 0,
    Obj = 1,
    Sop = 2,
    Chop = 4,
    Rop = 8,
    Shop = 16,
    Cop = 32,
    Vop = 64,
    Dop = 128,
    Top = 256,
}
pub type HAPI_NodeTypeBits = ::std::os::raw::c_int;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NodeFlags {
    Any = -1,
    None = 0,
    Display = 1,
    Render = 2,
    Templated = 4,
    Locked = 8,
    Editable = 16,
    Bypass = 32,
    Network = 64,
    Geometry = 128,
    Camera = 256,
    Light = 512,
    Subnet = 1024,
    Curve = 2048,
    Guide = 4096,
    Nonscheduler = 8192,
    NonBypass = 16384,
}
pub type HAPI_NodeFlagsBits = ::std::os::raw::c_int;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GroupType {
    Invalid = -1,
    Point = 0,
    Prim = 1,
    Edge = 2,
    Max = 3,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AttributeOwner {
    Invalid = -1,
    Vertex = 0,
    Point = 1,
    Prim = 2,
    Detail = 3,
    Max = 4,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CurveType {
    Invalid = -1,
    Linear = 0,
    Nurbs = 1,
    Bezier = 2,
    Max = 3,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InputCurveMethod {
    Invalid = -1,
    Cvs = 0,
    Breakpoints = 1,
    Max = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InputCurveParameterization {
    Invalid = -1,
    Uniform = 0,
    Chord = 1,
    Centripetal = 2,
    Max = 3,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum VolumeType {
    Invalid = -1,
    Houdini = 0,
    Vdb = 1,
    Max = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum VolumeVisualType {
    Invalid = -1,
    Smoke = 0,
    Rainbow = 1,
    Iso = 2,
    Invisible = 3,
    Heightfield = 4,
    Max = 5,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StorageType {
    Invalid = -1,
    Int = 0,
    Int64 = 1,
    Float = 2,
    Float64 = 3,
    String = 4,
    Uint8 = 5,
    Int8 = 6,
    Int16 = 7,
    Array = 8,
    Int64Array = 9,
    FloatArray = 10,
    Float64Array = 11,
    StringArray = 12,
    Uint8Array = 13,
    Int8Array = 14,
    Int16Array = 15,
    Max = 16,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AttributeTypeInfo {
    Invalid = -1,
    None = 0,
    Point = 1,
    Hpoint = 2,
    Vector = 3,
    Normal = 4,
    Color = 5,
    Quaternion = 6,
    Matrix3 = 7,
    Matrix = 8,
    St = 9,
    Hidden = 10,
    Box2 = 11,
    Box = 12,
    Texture = 13,
    Max = 14,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GeoType {
    Invalid = -1,
    Default = 0,
    Intermediate = 1,
    Input = 2,
    Curve = 3,
    Max = 4,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PartType {
    Invalid = -1,
    Mesh = 0,
    Curve = 1,
    Volume = 2,
    Instancer = 3,
    Box = 4,
    Sphere = 5,
    Max = 6,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InputType {
    Invalid = -1,
    Transform = 0,
    Geometry = 1,
    Max = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CurveOrders {
    Varying = 0,
    Invalid = 1,
    Linear = 2,
    Quadratic = 3,
    Cubic = 4,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TransformComponent {
    Tx = 0,
    Ty = 1,
    Tz = 2,
    Rx = 3,
    Ry = 4,
    Rz = 5,
    Qx = 6,
    Qy = 7,
    Qz = 8,
    Qw = 9,
    Sx = 10,
    Sy = 11,
    Sz = 12,
}
impl RSTOrder {
    pub const Default: RSTOrder = RSTOrder::Srt;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RSTOrder {
    Trs = 0,
    Tsr = 1,
    Rts = 2,
    Rst = 3,
    Str = 4,
    Srt = 5,
}
impl XYZOrder {
    pub const Default: XYZOrder = XYZOrder::Xyz;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XYZOrder {
    Xyz = 0,
    Xzy = 1,
    Yxz = 2,
    Yzx = 3,
    Zxy = 4,
    Zyx = 5,
}
impl ImageDataFormat {
    pub const Default: ImageDataFormat = ImageDataFormat::Int8;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ImageDataFormat {
    Unknown = -1,
    Int8 = 0,
    Int16 = 1,
    Int32 = 2,
    Float16 = 3,
    Float32 = 4,
    Max = 5,
}
impl ImagePacking {
    pub const Default3: ImagePacking = ImagePacking::Rgb;
}
impl ImagePacking {
    pub const Default4: ImagePacking = ImagePacking::Rgba;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ImagePacking {
    Unknown = -1,
    Single = 0,
    Dual = 1,
    Rgb = 2,
    Bgr = 3,
    Rgba = 4,
    Abgr = 5,
    Max = 6,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EnvIntType {
    EnvintInvalid = -1,
    HoudiniMajor = 100,
    HoudiniMinor = 110,
    HoudiniBuild = 120,
    HoudiniPatch = 130,
    EngineMajor = 200,
    EngineMinor = 210,
    EngineApi = 220,
    EnvintMax = 221,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SessionEnvIntType {
    Invalid = -1,
    License = 100,
    Max = 101,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CacheProperty {
    CachepropCurrent = 0,
    HasMin = 1,
    CachepropMin = 2,
    HasMax = 3,
    CachepropMax = 4,
    CullLevel = 5,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum HeightFieldSampling {
    Center = 0,
    Corner = 1,
}
impl PdgState {
    pub const State: PdgState = PdgState::Ready;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PdgState {
    Ready = 0,
    Cooking = 1,
    Max = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PdgEventType {
    PdgEventNull = 0,
    EventWorkitemAdd = 1,
    EventWorkitemRemove = 2,
    WorkitemStateChange = 3,
    WorkitemAddDep = 4,
    WorkitemRemoveDep = 5,
    WorkitemAddParent = 6,
    WorkitemRemoveParent = 7,
    EventNodeClear = 8,
    EventCookError = 9,
    EventCookWarning = 10,
    EventCookComplete = 11,
    EventDirtyStart = 12,
    EventDirtyStop = 13,
    EventDirtyAll = 14,
    EventUiSelect = 15,
    EventNodeCreate = 16,
    EventNodeRemove = 17,
    EventNodeRename = 18,
    EventNodeConnect = 19,
    EventNodeDisconnect = 20,
    WorkitemSetInt = 21,
    WorkitemSetFloat = 22,
    WorkitemSetString = 23,
    WorkitemSetFile = 24,
    WorkitemSetPyobject = 25,
    WorkitemSetGeometry = 26,
    EventWorkitemMerge = 27,
    EventWorkitemResult = 28,
    EventWorkitemPriority = 29,
    EventCookStart = 30,
    AddStaticAncestor = 31,
    RemoveStaticAncestor = 32,
    NodeProgressUpdate = 33,
    BatchItemInitialized = 34,
    PdgEventAll = 35,
    PdgEventLog = 36,
    EventSchedulerAdded = 37,
    EventSchedulerRemoved = 38,
    EventSetScheduler = 39,
    ServiceManagerAll = 40,
    EventNodeCooked = 41,
    EventNodeGenerated = 42,
    PdgContextEvents = 43,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PdgWorkItemState {
    Undefined = 0,
    Uncooked = 1,
    Waiting = 2,
    Scheduled = 3,
    Cooking = 4,
    Success = 5,
    Cache = 6,
    Fail = 7,
    Cancel = 8,
    Dirty = 9,
}
pub use self::PdgWorkItemState as HAPI_PDG_WorkitemState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_Transform {
    pub position: [f32; 3usize],
    pub rotationQuaternion: [f32; 4usize],
    pub scale: [f32; 3usize],
    pub shear: [f32; 3usize],
    pub rstOrder: RSTOrder,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_TransformEuler {
    pub position: [f32; 3usize],
    pub rotationEuler: [f32; 3usize],
    pub scale: [f32; 3usize],
    pub shear: [f32; 3usize],
    pub rotationOrder: XYZOrder,
    pub rstOrder: RSTOrder,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_Session {
    pub type_: SessionType,
    pub id: HAPI_SessionId,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ThriftServerOptions {
    pub autoClose: HAPI_Bool,
    pub timeoutMs: f32,
    pub verbosity: StatusVerbosity,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_TimelineOptions {
    pub fps: f32,
    pub startTime: f32,
    pub endTime: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_AssetInfo {
    pub nodeId: HAPI_NodeId,
    pub objectNodeId: HAPI_NodeId,
    pub hasEverCooked: HAPI_Bool,
    pub nameSH: HAPI_StringHandle,
    pub labelSH: HAPI_StringHandle,
    pub filePathSH: HAPI_StringHandle,
    pub versionSH: HAPI_StringHandle,
    pub fullOpNameSH: HAPI_StringHandle,
    pub helpTextSH: HAPI_StringHandle,
    pub helpURLSH: HAPI_StringHandle,
    pub objectCount: ::std::os::raw::c_int,
    pub handleCount: ::std::os::raw::c_int,
    pub transformInputCount: ::std::os::raw::c_int,
    pub geoInputCount: ::std::os::raw::c_int,
    pub geoOutputCount: ::std::os::raw::c_int,
    pub haveObjectsChanged: HAPI_Bool,
    pub haveMaterialsChanged: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_CookOptions {
    pub splitGeosByGroup: HAPI_Bool,
    pub splitGroupSH: HAPI_StringHandle,
    pub splitGeosByAttribute: HAPI_Bool,
    pub splitAttrSH: HAPI_StringHandle,
    pub maxVerticesPerPrimitive: ::std::os::raw::c_int,
    pub refineCurveToLinear: HAPI_Bool,
    pub curveRefineLOD: f32,
    pub clearErrorsAndWarnings: HAPI_Bool,
    pub cookTemplatedGeos: HAPI_Bool,
    pub splitPointsByVertexAttributes: HAPI_Bool,
    pub packedPrimInstancingMode: PackedPrimInstancingMode,
    pub handleBoxPartTypes: HAPI_Bool,
    pub handleSpherePartTypes: HAPI_Bool,
    pub checkPartChanges: HAPI_Bool,
    pub cacheMeshTopology: HAPI_Bool,
    pub preferOutputNodes: HAPI_Bool,
    pub extraFlags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_NodeInfo {
    pub id: HAPI_NodeId,
    pub parentId: HAPI_NodeId,
    pub nameSH: HAPI_StringHandle,
    pub type_: NodeType,
    pub isValid: HAPI_Bool,
    pub totalCookCount: ::std::os::raw::c_int,
    pub uniqueHoudiniNodeId: ::std::os::raw::c_int,
    pub internalNodePathSH: HAPI_StringHandle,
    pub parmCount: ::std::os::raw::c_int,
    pub parmIntValueCount: ::std::os::raw::c_int,
    pub parmFloatValueCount: ::std::os::raw::c_int,
    pub parmStringValueCount: ::std::os::raw::c_int,
    pub parmChoiceCount: ::std::os::raw::c_int,
    pub childNodeCount: ::std::os::raw::c_int,
    pub inputCount: ::std::os::raw::c_int,
    pub outputCount: ::std::os::raw::c_int,
    pub createdPostAssetLoad: HAPI_Bool,
    pub isTimeDependent: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ParmInfo {
    pub id: HAPI_ParmId,
    pub parentId: HAPI_ParmId,
    pub childIndex: ::std::os::raw::c_int,
    pub type_: ParmType,
    pub scriptType: PrmScriptType,
    pub typeInfoSH: HAPI_StringHandle,
    pub permissions: Permissions,
    pub tagCount: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub choiceListType: ChoiceListType,
    pub choiceCount: ::std::os::raw::c_int,
    pub nameSH: HAPI_StringHandle,
    pub labelSH: HAPI_StringHandle,
    pub templateNameSH: HAPI_StringHandle,
    pub helpSH: HAPI_StringHandle,
    pub hasMin: HAPI_Bool,
    pub hasMax: HAPI_Bool,
    pub hasUIMin: HAPI_Bool,
    pub hasUIMax: HAPI_Bool,
    pub min: f32,
    pub max: f32,
    pub UIMin: f32,
    pub UIMax: f32,
    pub invisible: HAPI_Bool,
    pub disabled: HAPI_Bool,
    pub spare: HAPI_Bool,
    pub joinNext: HAPI_Bool,
    pub labelNone: HAPI_Bool,
    pub intValuesIndex: ::std::os::raw::c_int,
    pub floatValuesIndex: ::std::os::raw::c_int,
    pub stringValuesIndex: ::std::os::raw::c_int,
    pub choiceIndex: ::std::os::raw::c_int,
    pub inputNodeType: NodeType,
    pub inputNodeFlag: NodeFlags,
    pub isChildOfMultiParm: HAPI_Bool,
    pub instanceNum: ::std::os::raw::c_int,
    pub instanceLength: ::std::os::raw::c_int,
    pub instanceCount: ::std::os::raw::c_int,
    pub instanceStartOffset: ::std::os::raw::c_int,
    pub rampType: RampType,
    pub visibilityConditionSH: HAPI_StringHandle,
    pub disabledConditionSH: HAPI_StringHandle,
    pub useMenuItemTokenAsValue: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ParmChoiceInfo {
    pub parentParmId: HAPI_ParmId,
    pub labelSH: HAPI_StringHandle,
    pub valueSH: HAPI_StringHandle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_HandleInfo {
    pub nameSH: HAPI_StringHandle,
    pub typeNameSH: HAPI_StringHandle,
    pub bindingsCount: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_HandleBindingInfo {
    pub handleParmNameSH: HAPI_StringHandle,
    pub assetParmNameSH: HAPI_StringHandle,
    pub assetParmId: HAPI_ParmId,
    pub assetParmIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ObjectInfo {
    pub nameSH: HAPI_StringHandle,
    pub objectInstancePathSH: HAPI_StringHandle,
    pub hasTransformChanged: HAPI_Bool,
    pub haveGeosChanged: HAPI_Bool,
    pub isVisible: HAPI_Bool,
    pub isInstancer: HAPI_Bool,
    pub isInstanced: HAPI_Bool,
    pub geoCount: ::std::os::raw::c_int,
    pub nodeId: HAPI_NodeId,
    pub objectToInstanceId: HAPI_NodeId,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_GeoInfo {
    pub type_: GeoType,
    pub nameSH: HAPI_StringHandle,
    pub nodeId: HAPI_NodeId,
    pub isEditable: HAPI_Bool,
    pub isTemplated: HAPI_Bool,
    pub isDisplayGeo: HAPI_Bool,
    pub hasGeoChanged: HAPI_Bool,
    pub hasMaterialChanged: HAPI_Bool,
    pub pointGroupCount: ::std::os::raw::c_int,
    pub primitiveGroupCount: ::std::os::raw::c_int,
    pub edgeGroupCount: ::std::os::raw::c_int,
    pub partCount: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_PartInfo {
    pub id: HAPI_PartId,
    pub nameSH: HAPI_StringHandle,
    pub type_: PartType,
    pub faceCount: ::std::os::raw::c_int,
    pub vertexCount: ::std::os::raw::c_int,
    pub pointCount: ::std::os::raw::c_int,
    pub attributeCounts: [::std::os::raw::c_int; 4usize],
    pub isInstanced: HAPI_Bool,
    pub instancedPartCount: ::std::os::raw::c_int,
    pub instanceCount: ::std::os::raw::c_int,
    pub hasChanged: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_AttributeInfo {
    pub exists: HAPI_Bool,
    pub owner: AttributeOwner,
    pub storage: StorageType,
    pub originalOwner: AttributeOwner,
    pub count: ::std::os::raw::c_int,
    pub tupleSize: ::std::os::raw::c_int,
    pub totalArrayElements: HAPI_Int64,
    pub typeInfo: AttributeTypeInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_MaterialInfo {
    pub nodeId: HAPI_NodeId,
    pub exists: HAPI_Bool,
    pub hasChanged: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ImageFileFormat {
    pub nameSH: HAPI_StringHandle,
    pub descriptionSH: HAPI_StringHandle,
    pub defaultExtensionSH: HAPI_StringHandle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_ImageInfo {
    pub imageFileFormatNameSH: HAPI_StringHandle,
    pub xRes: ::std::os::raw::c_int,
    pub yRes: ::std::os::raw::c_int,
    pub dataFormat: ImageDataFormat,
    pub interleaved: HAPI_Bool,
    pub packing: ImagePacking,
    pub gamma: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_Keyframe {
    pub time: f32,
    pub value: f32,
    pub inTangent: f32,
    pub outTangent: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_VolumeInfo {
    pub nameSH: HAPI_StringHandle,
    pub type_: VolumeType,
    pub xLength: ::std::os::raw::c_int,
    pub yLength: ::std::os::raw::c_int,
    pub zLength: ::std::os::raw::c_int,
    pub minX: ::std::os::raw::c_int,
    pub minY: ::std::os::raw::c_int,
    pub minZ: ::std::os::raw::c_int,
    pub tupleSize: ::std::os::raw::c_int,
    pub storage: StorageType,
    pub tileSize: ::std::os::raw::c_int,
    pub transform: HAPI_Transform,
    pub hasTaper: HAPI_Bool,
    pub xTaper: f32,
    pub yTaper: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_VolumeTileInfo {
    pub minX: ::std::os::raw::c_int,
    pub minY: ::std::os::raw::c_int,
    pub minZ: ::std::os::raw::c_int,
    pub isValid: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_VolumeVisualInfo {
    pub type_: VolumeVisualType,
    pub iso: f32,
    pub density: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_CurveInfo {
    pub curveType: CurveType,
    pub curveCount: ::std::os::raw::c_int,
    pub vertexCount: ::std::os::raw::c_int,
    pub knotCount: ::std::os::raw::c_int,
    pub isPeriodic: HAPI_Bool,
    pub isRational: HAPI_Bool,
    pub order: ::std::os::raw::c_int,
    pub hasKnots: HAPI_Bool,
    pub isClosed: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_InputCurveInfo {
    pub curveType: CurveType,
    pub order: ::std::os::raw::c_int,
    pub closed: HAPI_Bool,
    pub reverse: HAPI_Bool,
    pub inputMethod: InputCurveMethod,
    pub breakpointParameterization: InputCurveParameterization,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_BoxInfo {
    pub center: [f32; 3usize],
    pub size: [f32; 3usize],
    pub rotation: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_SphereInfo {
    pub center: [f32; 3usize],
    pub radius: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_PDG_EventInfo {
    pub nodeId: HAPI_NodeId,
    pub workItemId: HAPI_PDG_WorkItemId,
    pub dependencyId: HAPI_PDG_WorkItemId,
    pub currentState: ::std::os::raw::c_int,
    pub lastState: ::std::os::raw::c_int,
    pub eventType: ::std::os::raw::c_int,
    pub msgSH: HAPI_StringHandle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_PDG_WorkItemInfo {
    pub index: ::std::os::raw::c_int,
    pub outputFileCount: ::std::os::raw::c_int,
    pub nameSH: HAPI_StringHandle,
}
pub type HAPI_PDG_WorkitemInfo = HAPI_PDG_WorkItemInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_PDG_WorkItemOutputFile {
    pub filePathSH: ::std::os::raw::c_int,
    pub tagSH: ::std::os::raw::c_int,
    pub hash: HAPI_Int64,
}
pub type HAPI_PDG_WorkitemResultInfo = HAPI_PDG_WorkItemOutputFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_Viewport {
    pub position: [f32; 3usize],
    pub rotationQuaternion: [f32; 4usize],
    pub offset: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_SessionSyncInfo {
    pub cookUsingHoudiniTime: HAPI_Bool,
    pub syncViewport: HAPI_Bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAPI_CompositorOptions {
    pub maximumResolutionX: ::std::os::raw::c_int,
    pub maximumResolutionY: ::std::os::raw::c_int,
}
extern "C" {
    pub fn HAPI_ThriftServerOptions_Init(in_: *mut HAPI_ThriftServerOptions);
}
extern "C" {
    pub fn HAPI_ThriftServerOptions_Create() -> HAPI_ThriftServerOptions;
}
extern "C" {
    pub fn HAPI_TimelineOptions_Init(in_: *mut HAPI_TimelineOptions);
}
extern "C" {
    pub fn HAPI_TimelineOptions_Create() -> HAPI_TimelineOptions;
}
extern "C" {
    pub fn HAPI_CompositorOptions_Init(in_: *mut HAPI_CompositorOptions);
}
extern "C" {
    pub fn HAPI_CompositorOptions_Create() -> HAPI_CompositorOptions;
}
extern "C" {
    pub fn HAPI_AssetInfo_Init(in_: *mut HAPI_AssetInfo);
}
extern "C" {
    pub fn HAPI_AssetInfo_Create() -> HAPI_AssetInfo;
}
extern "C" {
    pub fn HAPI_CookOptions_Init(in_: *mut HAPI_CookOptions);
}
extern "C" {
    pub fn HAPI_CookOptions_Create() -> HAPI_CookOptions;
}
extern "C" {
    pub fn HAPI_CookOptions_AreEqual(
        left: *const HAPI_CookOptions,
        right: *const HAPI_CookOptions,
    ) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_NodeInfo_Init(in_: *mut HAPI_NodeInfo);
}
extern "C" {
    pub fn HAPI_NodeInfo_Create() -> HAPI_NodeInfo;
}
extern "C" {
    pub fn HAPI_ParmInfo_Init(in_: *mut HAPI_ParmInfo);
}
extern "C" {
    pub fn HAPI_ParmInfo_Create() -> HAPI_ParmInfo;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsInt(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsFloat(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsString(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsPath(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsNode(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_IsNonValue(in_: *const HAPI_ParmInfo) -> HAPI_Bool;
}
extern "C" {
    pub fn HAPI_ParmInfo_GetIntValueCount(in_: *const HAPI_ParmInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_ParmInfo_GetFloatValueCount(in_: *const HAPI_ParmInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_ParmInfo_GetStringValueCount(in_: *const HAPI_ParmInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_ParmChoiceInfo_Init(in_: *mut HAPI_ParmChoiceInfo);
}
extern "C" {
    pub fn HAPI_ParmChoiceInfo_Create() -> HAPI_ParmChoiceInfo;
}
extern "C" {
    pub fn HAPI_HandleInfo_Init(in_: *mut HAPI_HandleInfo);
}
extern "C" {
    pub fn HAPI_HandleInfo_Create() -> HAPI_HandleInfo;
}
extern "C" {
    pub fn HAPI_HandleBindingInfo_Init(in_: *mut HAPI_HandleBindingInfo);
}
extern "C" {
    pub fn HAPI_HandleBindingInfo_Create() -> HAPI_HandleBindingInfo;
}
extern "C" {
    pub fn HAPI_ObjectInfo_Init(in_: *mut HAPI_ObjectInfo);
}
extern "C" {
    pub fn HAPI_ObjectInfo_Create() -> HAPI_ObjectInfo;
}
extern "C" {
    pub fn HAPI_GeoInfo_Init(in_: *mut HAPI_GeoInfo);
}
extern "C" {
    pub fn HAPI_GeoInfo_Create() -> HAPI_GeoInfo;
}
extern "C" {
    pub fn HAPI_GeoInfo_GetGroupCountByType(
        in_: *mut HAPI_GeoInfo,
        type_: GroupType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_PartInfo_Init(in_: *mut HAPI_PartInfo);
}
extern "C" {
    pub fn HAPI_PartInfo_Create() -> HAPI_PartInfo;
}
extern "C" {
    pub fn HAPI_PartInfo_GetElementCountByAttributeOwner(
        in_: *mut HAPI_PartInfo,
        owner: AttributeOwner,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_PartInfo_GetElementCountByGroupType(
        in_: *mut HAPI_PartInfo,
        type_: GroupType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_PartInfo_GetAttributeCountByOwner(
        in_: *mut HAPI_PartInfo,
        owner: AttributeOwner,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HAPI_AttributeInfo_Init(in_: *mut HAPI_AttributeInfo);
}
extern "C" {
    pub fn HAPI_AttributeInfo_Create() -> HAPI_AttributeInfo;
}
extern "C" {
    pub fn HAPI_MaterialInfo_Init(in_: *mut HAPI_MaterialInfo);
}
extern "C" {
    pub fn HAPI_MaterialInfo_Create() -> HAPI_MaterialInfo;
}
extern "C" {
    pub fn HAPI_ImageFileFormat_Init(in_: *mut HAPI_ImageFileFormat);
}
extern "C" {
    pub fn HAPI_ImageFileFormat_Create() -> HAPI_ImageFileFormat;
}
extern "C" {
    pub fn HAPI_ImageInfo_Init(in_: *mut HAPI_ImageInfo);
}
extern "C" {
    pub fn HAPI_ImageInfo_Create() -> HAPI_ImageInfo;
}
extern "C" {
    pub fn HAPI_Keyframe_Init(in_: *mut HAPI_Keyframe);
}
extern "C" {
    pub fn HAPI_Keyframe_Create() -> HAPI_Keyframe;
}
extern "C" {
    pub fn HAPI_VolumeInfo_Init(in_: *mut HAPI_VolumeInfo);
}
extern "C" {
    pub fn HAPI_VolumeInfo_Create() -> HAPI_VolumeInfo;
}
extern "C" {
    pub fn HAPI_VolumeTileInfo_Init(in_: *mut HAPI_VolumeTileInfo);
}
extern "C" {
    pub fn HAPI_VolumeTileInfo_Create() -> HAPI_VolumeTileInfo;
}
extern "C" {
    pub fn HAPI_CurveInfo_Init(in_: *mut HAPI_CurveInfo);
}
extern "C" {
    pub fn HAPI_CurveInfo_Create() -> HAPI_CurveInfo;
}
extern "C" {
    pub fn HAPI_InputCurveInfo_Init(in_: *mut HAPI_InputCurveInfo);
}
extern "C" {
    pub fn HAPI_InputCurveInfo_Create() -> HAPI_InputCurveInfo;
}
extern "C" {
    pub fn HAPI_Transform_Init(in_: *mut HAPI_Transform);
}
extern "C" {
    pub fn HAPI_Transform_Create() -> HAPI_Transform;
}
extern "C" {
    pub fn HAPI_TransformEuler_Init(in_: *mut HAPI_TransformEuler);
}
extern "C" {
    pub fn HAPI_TransformEuler_Create() -> HAPI_TransformEuler;
}
extern "C" {
    pub fn HAPI_Viewport_Init(in_: *mut HAPI_Viewport);
}
extern "C" {
    pub fn HAPI_Viewport_Create() -> HAPI_Viewport;
}
extern "C" {
    pub fn HAPI_SessionSyncInfo_Init(in_: *mut HAPI_SessionSyncInfo);
}
extern "C" {
    pub fn HAPI_SessionSyncInfo_Create() -> HAPI_SessionSyncInfo;
}
extern "C" {
    pub fn HAPI_CreateInProcessSession(session: *mut HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_StartThriftSocketServer(
        options: *const HAPI_ThriftServerOptions,
        port: ::std::os::raw::c_int,
        process_id: *mut HAPI_ProcessId,
        log_file: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateThriftSocketSession(
        session: *mut HAPI_Session,
        host_name: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_StartThriftNamedPipeServer(
        options: *const HAPI_ThriftServerOptions,
        pipe_name: *const ::std::os::raw::c_char,
        process_id: *mut HAPI_ProcessId,
        log_file: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateThriftNamedPipeSession(
        session: *mut HAPI_Session,
        pipe_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_BindCustomImplementation(
        session_type: SessionType,
        dll_path: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateCustomSession(
        session_type: SessionType,
        session_info: *mut ::std::os::raw::c_void,
        session: *mut HAPI_Session,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_IsSessionValid(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CloseSession(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_IsInitialized(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_Initialize(
        session: *const HAPI_Session,
        cook_options: *const HAPI_CookOptions,
        use_cooking_thread: HAPI_Bool,
        cooking_thread_stack_size: ::std::os::raw::c_int,
        houdini_environment_files: *const ::std::os::raw::c_char,
        otl_search_path: *const ::std::os::raw::c_char,
        dso_search_path: *const ::std::os::raw::c_char,
        image_dso_search_path: *const ::std::os::raw::c_char,
        audio_dso_search_path: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_Cleanup(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_Shutdown(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetEnvInt(int_type: EnvIntType, value: *mut ::std::os::raw::c_int) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetSessionEnvInt(
        session: *const HAPI_Session,
        int_type: SessionEnvIntType,
        value: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetServerEnvInt(
        session: *const HAPI_Session,
        variable_name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetServerEnvString(
        session: *const HAPI_Session,
        variable_name: *const ::std::os::raw::c_char,
        value: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetServerEnvVarCount(
        session: *const HAPI_Session,
        env_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetServerEnvVarList(
        session: *const HAPI_Session,
        values_array: *mut HAPI_StringHandle,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetServerEnvInt(
        session: *const HAPI_Session,
        variable_name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetServerEnvString(
        session: *const HAPI_Session,
        variable_name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStatus(
        session: *const HAPI_Session,
        status_type: StatusType,
        status: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStatusStringBufLength(
        session: *const HAPI_Session,
        status_type: StatusType,
        verbosity: StatusVerbosity,
        buffer_length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStatusString(
        session: *const HAPI_Session,
        status_type: StatusType,
        string_value: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ComposeNodeCookResult(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        verbosity: StatusVerbosity,
        buffer_length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetComposedNodeCookResult(
        session: *const HAPI_Session,
        string_value: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CheckForSpecificErrors(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        errors_to_look_for: HAPI_ErrorCodeBits,
        errors_found: *mut HAPI_ErrorCodeBits,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ClearConnectionError() -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetConnectionErrorLength(buffer_length: *mut ::std::os::raw::c_int) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetConnectionError(
        string_value: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        clear: HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCookingTotalCount(
        session: *const HAPI_Session,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCookingCurrentCount(
        session: *const HAPI_Session,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_Interrupt(session: *const HAPI_Session) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConvertTransform(
        session: *const HAPI_Session,
        transform_in: *const HAPI_TransformEuler,
        rst_order: RSTOrder,
        rot_order: XYZOrder,
        transform_out: *mut HAPI_TransformEuler,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConvertMatrixToQuat(
        session: *const HAPI_Session,
        matrix: *const f32,
        rst_order: RSTOrder,
        transform_out: *mut HAPI_Transform,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConvertMatrixToEuler(
        session: *const HAPI_Session,
        matrix: *const f32,
        rst_order: RSTOrder,
        rot_order: XYZOrder,
        transform_out: *mut HAPI_TransformEuler,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConvertTransformQuatToMatrix(
        session: *const HAPI_Session,
        transform: *const HAPI_Transform,
        matrix: *mut f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConvertTransformEulerToMatrix(
        session: *const HAPI_Session,
        transform: *const HAPI_TransformEuler,
        matrix: *mut f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_PythonThreadInterpreterLock(
        session: *const HAPI_Session,
        locked: HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStringBufLength(
        session: *const HAPI_Session,
        string_handle: HAPI_StringHandle,
        buffer_length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetString(
        session: *const HAPI_Session,
        string_handle: HAPI_StringHandle,
        string_value: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCustomString(
        session: *const HAPI_Session,
        string_value: *const ::std::os::raw::c_char,
        handle_value: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RemoveCustomString(
        session: *const HAPI_Session,
        string_handle: HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStringBatchSize(
        session: *const HAPI_Session,
        string_handle_array: *const ::std::os::raw::c_int,
        string_handle_count: ::std::os::raw::c_int,
        string_buffer_size: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetStringBatch(
        session: *const HAPI_Session,
        char_buffer: *mut ::std::os::raw::c_char,
        char_array_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetTime(session: *const HAPI_Session, time: *mut f32) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetTime(session: *const HAPI_Session, time: f32) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetUseHoudiniTime(
        session: *const HAPI_Session,
        enabled: *mut HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetUseHoudiniTime(session: *const HAPI_Session, enabled: HAPI_Bool) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetTimelineOptions(
        session: *const HAPI_Session,
        timeline_options: *mut HAPI_TimelineOptions,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetTimelineOptions(
        session: *const HAPI_Session,
        timeline_options: *const HAPI_TimelineOptions,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCompositorOptions(
        session: *const HAPI_Session,
        compositor_options: *mut HAPI_CompositorOptions,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCompositorOptions(
        session: *const HAPI_Session,
        compositor_options: *const HAPI_CompositorOptions,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadAssetLibraryFromFile(
        session: *const HAPI_Session,
        file_path: *const ::std::os::raw::c_char,
        allow_overwrite: HAPI_Bool,
        library_id: *mut HAPI_AssetLibraryId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadAssetLibraryFromMemory(
        session: *const HAPI_Session,
        library_buffer: *const ::std::os::raw::c_char,
        library_buffer_length: ::std::os::raw::c_int,
        allow_overwrite: HAPI_Bool,
        library_id: *mut HAPI_AssetLibraryId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAvailableAssetCount(
        session: *const HAPI_Session,
        library_id: HAPI_AssetLibraryId,
        asset_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAvailableAssets(
        session: *const HAPI_Session,
        library_id: HAPI_AssetLibraryId,
        asset_names_array: *mut HAPI_StringHandle,
        asset_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        asset_info: *mut HAPI_AssetInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetDefinitionParmCounts(
        session: *const HAPI_Session,
        library_id: HAPI_AssetLibraryId,
        asset_name: *const ::std::os::raw::c_char,
        parm_count: *mut ::std::os::raw::c_int,
        int_value_count: *mut ::std::os::raw::c_int,
        float_value_count: *mut ::std::os::raw::c_int,
        string_value_count: *mut ::std::os::raw::c_int,
        choice_value_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetDefinitionParmInfos(
        session: *const HAPI_Session,
        library_id: HAPI_AssetLibraryId,
        asset_name: *const ::std::os::raw::c_char,
        parm_infos_array: *mut HAPI_ParmInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetDefinitionParmValues(
        session: *const HAPI_Session,
        library_id: HAPI_AssetLibraryId,
        asset_name: *const ::std::os::raw::c_char,
        int_values_array: *mut ::std::os::raw::c_int,
        int_start: ::std::os::raw::c_int,
        int_length: ::std::os::raw::c_int,
        float_values_array: *mut f32,
        float_start: ::std::os::raw::c_int,
        float_length: ::std::os::raw::c_int,
        string_evaluate: HAPI_Bool,
        string_values_array: *mut HAPI_StringHandle,
        string_start: ::std::os::raw::c_int,
        string_length: ::std::os::raw::c_int,
        choice_values_array: *mut HAPI_ParmChoiceInfo,
        choice_start: ::std::os::raw::c_int,
        choice_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetLoadedAssetLibraryCount(
        session: *const HAPI_Session,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetLibraryIds(
        session: *const HAPI_Session,
        asset_library_ids_array: *mut HAPI_AssetLibraryId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAssetLibraryFilePath(
        session: *const HAPI_Session,
        asset_library_id: HAPI_AssetLibraryId,
        file_path_sh: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadHIPFile(
        session: *const HAPI_Session,
        file_name: *const ::std::os::raw::c_char,
        cook_on_load: HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_MergeHIPFile(
        session: *const HAPI_Session,
        file_name: *const ::std::os::raw::c_char,
        cook_on_load: HAPI_Bool,
        file_id: *mut HAPI_HIPFileId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SaveHIPFile(
        session: *const HAPI_Session,
        file_path: *const ::std::os::raw::c_char,
        lock_nodes: HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetHIPFileNodeCount(
        session: *const HAPI_Session,
        id: HAPI_HIPFileId,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetHIPFileNodeIds(
        session: *const HAPI_Session,
        id: HAPI_HIPFileId,
        node_ids: *mut HAPI_NodeId,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_IsNodeValid(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        unique_node_id: ::std::os::raw::c_int,
        answer: *mut HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNodeInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        node_info: *mut HAPI_NodeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNodePath(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        relative_to_node_id: HAPI_NodeId,
        path: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetManagerNodeId(
        session: *const HAPI_Session,
        node_type: NodeType,
        node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ComposeChildNodeList(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        node_type_filter: HAPI_NodeTypeBits,
        node_flags_filter: HAPI_NodeFlagsBits,
        recursive: HAPI_Bool,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetComposedChildNodeList(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        child_node_ids_array: *mut HAPI_NodeId,
        count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateNode(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        operator_name: *const ::std::os::raw::c_char,
        node_label: *const ::std::os::raw::c_char,
        cook_on_creation: HAPI_Bool,
        new_node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateInputNode(
        session: *const HAPI_Session,
        node_id: *mut HAPI_NodeId,
        name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateInputCurveNode(
        session: *const HAPI_Session,
        node_id: *mut HAPI_NodeId,
        name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateHeightFieldInput(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        name: *const ::std::os::raw::c_char,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        voxelsize: f32,
        sampling: HeightFieldSampling,
        heightfield_node_id: *mut HAPI_NodeId,
        height_node_id: *mut HAPI_NodeId,
        mask_node_id: *mut HAPI_NodeId,
        merge_node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateHeightfieldInputVolumeNode(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        new_node_id: *mut HAPI_NodeId,
        name: *const ::std::os::raw::c_char,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        voxelsize: f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CookNode(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        cook_options: *const HAPI_CookOptions,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DeleteNode(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RenameNode(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        new_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ConnectNodeInput(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        input_index: ::std::os::raw::c_int,
        node_id_to_connect: HAPI_NodeId,
        output_index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DisconnectNodeInput(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        input_index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_QueryNodeInput(
        session: *const HAPI_Session,
        node_to_query: HAPI_NodeId,
        input_index: ::std::os::raw::c_int,
        connected_node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNodeInputName(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        input_idx: ::std::os::raw::c_int,
        name: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DisconnectNodeOutputsAt(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        output_index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_QueryNodeOutputConnectedCount(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        output_idx: ::std::os::raw::c_int,
        into_subnets: HAPI_Bool,
        through_dots: HAPI_Bool,
        connected_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_QueryNodeOutputConnectedNodes(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        output_idx: ::std::os::raw::c_int,
        into_subnets: HAPI_Bool,
        through_dots: HAPI_Bool,
        connected_node_ids_array: *mut HAPI_NodeId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNodeOutputName(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        output_idx: ::std::os::raw::c_int,
        name: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNodeFromPath(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        path: *const ::std::os::raw::c_char,
        node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetOutputNodeId(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        output: ::std::os::raw::c_int,
        output_node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParameters(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_infos_array: *mut HAPI_ParmInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        parm_info: *mut HAPI_ParmInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmIdFromName(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        parm_id: *mut HAPI_ParmId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmInfoFromName(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        parm_info: *mut HAPI_ParmInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmTagName(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        tag_index: ::std::os::raw::c_int,
        tag_name: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmTagValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        tag_name: *const ::std::os::raw::c_char,
        tag_value: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ParmHasTag(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        tag_name: *const ::std::os::raw::c_char,
        has_tag: *mut HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ParmHasExpression(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        has_expression: *mut HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmWithTag(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        tag_name: *const ::std::os::raw::c_char,
        parm_id: *mut HAPI_ParmId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmExpression(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        value: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RevertParmToDefault(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RevertParmToDefaults(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmExpression(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        value: *const ::std::os::raw::c_char,
        parm_id: HAPI_ParmId,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RemoveParmExpression(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmIntValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmIntValues(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        values_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmFloatValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        value: *mut f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmFloatValues(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        values_array: *mut f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmStringValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        evaluate: HAPI_Bool,
        value: *mut HAPI_StringHandle,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmStringValues(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        evaluate: HAPI_Bool,
        values_array: *mut HAPI_StringHandle,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmNodeValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        value: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmFile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        destination_directory: *const ::std::os::raw::c_char,
        destination_file_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetParmChoiceLists(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_choices_array: *mut HAPI_ParmChoiceInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmIntValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmIntValues(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        values_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmFloatValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmFloatValues(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        values_array: *const f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmStringValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        value: *const ::std::os::raw::c_char,
        parm_id: HAPI_ParmId,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetParmNodeValue(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_name: *const ::std::os::raw::c_char,
        value: HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_InsertMultiparmInstance(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        instance_position: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RemoveMultiparmInstance(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        instance_position: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetHandleInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        handle_infos_array: *mut HAPI_HandleInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetHandleBindingInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        handle_index: ::std::os::raw::c_int,
        handle_binding_infos_array: *mut HAPI_HandleBindingInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPresetBufLength(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        preset_type: PresetType,
        preset_name: *const ::std::os::raw::c_char,
        buffer_length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPreset(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        buffer: *mut ::std::os::raw::c_char,
        buffer_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetPreset(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        preset_type: PresetType,
        preset_name: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_char,
        buffer_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetObjectInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        object_info: *mut HAPI_ObjectInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetObjectTransform(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        relative_to_node_id: HAPI_NodeId,
        rst_order: RSTOrder,
        transform: *mut HAPI_Transform,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ComposeObjectList(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        categories: *const ::std::os::raw::c_char,
        object_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetComposedObjectList(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        object_infos_array: *mut HAPI_ObjectInfo,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetComposedObjectTransforms(
        session: *const HAPI_Session,
        parent_node_id: HAPI_NodeId,
        rst_order: RSTOrder,
        transform_array: *mut HAPI_Transform,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetInstancedObjectIds(
        session: *const HAPI_Session,
        object_node_id: HAPI_NodeId,
        instanced_node_id_array: *mut HAPI_NodeId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetInstanceTransformsOnPart(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        rst_order: RSTOrder,
        transforms_array: *mut HAPI_Transform,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetObjectTransform(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        trans: *const HAPI_TransformEuler,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetDisplayGeoInfo(
        session: *const HAPI_Session,
        object_node_id: HAPI_NodeId,
        geo_info: *mut HAPI_GeoInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetOutputGeoCount(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetOutputGeoInfos(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        geo_infos_array: *mut HAPI_GeoInfo,
        count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGeoInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        geo_info: *mut HAPI_GeoInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPartInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        part_info: *mut HAPI_PartInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetEdgeCountOfEdgeGroup(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_name: *const ::std::os::raw::c_char,
        edge_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetFaceCounts(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        face_counts_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVertexList(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        vertex_list_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        owner: AttributeOwner,
        attr_info: *mut HAPI_AttributeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeNames(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        owner: AttributeOwner,
        attribute_names_array: *mut HAPI_StringHandle,
        count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeIntArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut ::std::os::raw::c_int,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeUInt8Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut HAPI_UInt8,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeUInt8ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut HAPI_UInt8,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt8Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut HAPI_Int8,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt8ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut HAPI_Int8,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt16Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut HAPI_Int16,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt16ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut HAPI_Int16,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt64Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut HAPI_Int64,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeInt64ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut HAPI_Int64,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeFloatArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut f32,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeFloat64Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        stride: ::std::os::raw::c_int,
        data_array: *mut f64,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeFloat64ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut f64,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeStringData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_array: *mut HAPI_StringHandle,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetAttributeStringArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *mut HAPI_AttributeInfo,
        data_fixed_array: *mut HAPI_StringHandle,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGroupNames(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        group_type: GroupType,
        group_names_array: *mut HAPI_StringHandle,
        group_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGroupMembership(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_name: *const ::std::os::raw::c_char,
        membership_array_all_equal: *mut HAPI_Bool,
        membership_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGroupCountOnPackedInstancePart(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        pointGroupCount: *mut ::std::os::raw::c_int,
        primitiveGroupCount: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGroupNamesOnPackedInstancePart(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_names_array: *mut HAPI_StringHandle,
        group_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGroupMembershipOnPackedInstancePart(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_name: *const ::std::os::raw::c_char,
        membership_array_all_equal: *mut HAPI_Bool,
        membership_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetInstancedPartIds(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        instanced_parts_array: *mut HAPI_PartId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetInstancerPartTransforms(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        rst_order: RSTOrder,
        transforms_array: *mut HAPI_Transform,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetPartInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        part_info: *const HAPI_PartInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetFaceCounts(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        face_counts_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVertexList(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        vertex_list_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_AddAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DeleteAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeUInt8Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_UInt8,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt8Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int8,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt16Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int16,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt64Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int64,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloat64Data(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const f64,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeStringData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *mut *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeIndexedStringData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        string_array: *mut *const ::std::os::raw::c_char,
        string_count: ::std::os::raw::c_int,
        indices_array: *const ::std::os::raw::c_int,
        indices_start: ::std::os::raw::c_int,
        indices_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeStringUniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const ::std::os::raw::c_char,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeIntUniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const ::std::os::raw::c_int,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeUInt8UniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_UInt8,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt8UniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int8,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt16UniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int16,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt64UniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const HAPI_Int64,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloatUniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const f32,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloat64UniqueData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_array: *const f64,
        data_length: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeIntArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const ::std::os::raw::c_int,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeUInt8ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const HAPI_UInt8,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt8ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const HAPI_Int8,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt16ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const HAPI_Int16,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeInt64ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const HAPI_Int64,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloatArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const f32,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeFloat64ArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *const f64,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAttributeStringArrayData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        attr_info: *const HAPI_AttributeInfo,
        data_fixed_array: *mut *const ::std::os::raw::c_char,
        data_fixed_length: ::std::os::raw::c_int,
        sizes_fixed_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        sizes_fixed_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_AddGroup(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DeleteGroup(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetGroupMembership(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        group_type: GroupType,
        group_name: *const ::std::os::raw::c_char,
        membership_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CommitGeo(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RevertGeo(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetMaterialNodeIdsOnFaces(
        session: *const HAPI_Session,
        geometry_node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        are_all_the_same: *mut HAPI_Bool,
        material_ids_array: *mut HAPI_NodeId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetMaterialInfo(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        material_info: *mut HAPI_MaterialInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RenderCOPToImage(
        session: *const HAPI_Session,
        cop_node_id: HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_RenderTextureToImage(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetImageInfo(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_info: *mut HAPI_ImageInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetImageInfo(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_info: *const HAPI_ImageInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetImagePlaneCount(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_plane_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetImagePlanes(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_planes_array: *mut HAPI_StringHandle,
        image_plane_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ExtractImageToFile(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_file_format_name: *const ::std::os::raw::c_char,
        image_planes: *const ::std::os::raw::c_char,
        destination_folder_path: *const ::std::os::raw::c_char,
        destination_file_name: *const ::std::os::raw::c_char,
        destination_file_path: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetImageFilePath(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_file_format_name: *const ::std::os::raw::c_char,
        image_planes: *const ::std::os::raw::c_char,
        destination_folder_path: *const ::std::os::raw::c_char,
        destination_file_name: *const ::std::os::raw::c_char,
        texture_parm_id: HAPI_ParmId,
        destination_file_path: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ExtractImageToMemory(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        image_file_format_name: *const ::std::os::raw::c_char,
        image_planes: *const ::std::os::raw::c_char,
        buffer_size: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetImageMemoryBuffer(
        session: *const HAPI_Session,
        material_node_id: HAPI_NodeId,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetSupportedImageFileFormatCount(
        session: *const HAPI_Session,
        file_format_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetSupportedImageFileFormats(
        session: *const HAPI_Session,
        formats_array: *mut HAPI_ImageFileFormat,
        file_format_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetAnimCurve(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        parm_id: HAPI_ParmId,
        parm_index: ::std::os::raw::c_int,
        curve_keyframes_array: *const HAPI_Keyframe,
        keyframe_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetTransformAnimCurve(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        trans_comp: TransformComponent,
        curve_keyframes_array: *const HAPI_Keyframe,
        keyframe_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_ResetSimulation(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        volume_info: *mut HAPI_VolumeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetFirstVolumeTile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        tile: *mut HAPI_VolumeTileInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNextVolumeTile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        tile: *mut HAPI_VolumeTileInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeVoxelFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        x_index: ::std::os::raw::c_int,
        y_index: ::std::os::raw::c_int,
        z_index: ::std::os::raw::c_int,
        values_array: *mut f32,
        value_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeTileFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        fill_value: f32,
        tile: *const HAPI_VolumeTileInfo,
        values_array: *mut f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeVoxelIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        x_index: ::std::os::raw::c_int,
        y_index: ::std::os::raw::c_int,
        z_index: ::std::os::raw::c_int,
        values_array: *mut ::std::os::raw::c_int,
        value_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeTileIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        fill_value: ::std::os::raw::c_int,
        tile: *const HAPI_VolumeTileInfo,
        values_array: *mut ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetHeightFieldData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        values_array: *mut f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVolumeInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        volume_info: *const HAPI_VolumeInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVolumeTileFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        tile: *const HAPI_VolumeTileInfo,
        values_array: *const f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVolumeTileIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        tile: *const HAPI_VolumeTileInfo,
        values_array: *const ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVolumeVoxelFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        x_index: ::std::os::raw::c_int,
        y_index: ::std::os::raw::c_int,
        z_index: ::std::os::raw::c_int,
        values_array: *const f32,
        value_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetVolumeVoxelIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        x_index: ::std::os::raw::c_int,
        y_index: ::std::os::raw::c_int,
        z_index: ::std::os::raw::c_int,
        values_array: *const ::std::os::raw::c_int,
        value_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeBounds(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        x_min: *mut f32,
        y_min: *mut f32,
        z_min: *mut f32,
        x_max: *mut f32,
        y_max: *mut f32,
        z_max: *mut f32,
        x_center: *mut f32,
        y_center: *mut f32,
        z_center: *mut f32,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetHeightFieldData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        name: *const ::std::os::raw::c_char,
        values_array: *const f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetVolumeVisualInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        visual_info: *mut HAPI_VolumeVisualInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCurveInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        info: *mut HAPI_CurveInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCurveCounts(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        counts_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCurveOrders(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        orders_array: *mut ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCurveKnots(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        knots_array: *mut f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCurveInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        info: *const HAPI_CurveInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCurveCounts(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        counts_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCurveOrders(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        orders_array: *const ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCurveKnots(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        knots_array: *const f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetInputCurveInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        info: *mut HAPI_InputCurveInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetInputCurveInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        info: *const HAPI_InputCurveInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetInputCurvePositions(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        positions_array: *const f32,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetInputCurvePositionsRotationsScales(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        positions_array: *const f32,
        positions_start: ::std::os::raw::c_int,
        positions_length: ::std::os::raw::c_int,
        rotations_array: *const f32,
        rotations_start: ::std::os::raw::c_int,
        rotations_length: ::std::os::raw::c_int,
        scales_array: *const f32,
        scales_start: ::std::os::raw::c_int,
        scales_length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetBoxInfo(
        session: *const HAPI_Session,
        geo_node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        box_info: *mut HAPI_BoxInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetSphereInfo(
        session: *const HAPI_Session,
        geo_node_id: HAPI_NodeId,
        part_id: HAPI_PartId,
        sphere_info: *mut HAPI_SphereInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetActiveCacheCount(
        session: *const HAPI_Session,
        active_cache_count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetActiveCacheNames(
        session: *const HAPI_Session,
        cache_names_array: *mut HAPI_StringHandle,
        active_cache_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetCacheProperty(
        session: *const HAPI_Session,
        cache_name: *const ::std::os::raw::c_char,
        cache_property: CacheProperty,
        property_value: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetCacheProperty(
        session: *const HAPI_Session,
        cache_name: *const ::std::os::raw::c_char,
        cache_property: CacheProperty,
        property_value: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SaveGeoToFile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        file_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadGeoFromFile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        file_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SaveNodeToFile(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        file_name: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadNodeFromFile(
        session: *const HAPI_Session,
        file_name: *const ::std::os::raw::c_char,
        parent_node_id: HAPI_NodeId,
        node_label: *const ::std::os::raw::c_char,
        cook_on_load: HAPI_Bool,
        new_node_id: *mut HAPI_NodeId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetGeoSize(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        format: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SaveGeoToMemory(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_LoadGeoFromMemory(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        format: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetNodeDisplay(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        onOff: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetTotalCookCount(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        node_type_filter: HAPI_NodeTypeBits,
        node_flags_filter: HAPI_NodeFlagsBits,
        recursive: HAPI_Bool,
        count: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetSessionSync(session: *const HAPI_Session, enable: HAPI_Bool) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetViewport(
        session: *const HAPI_Session,
        viewport: *mut HAPI_Viewport,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetViewport(
        session: *const HAPI_Session,
        viewport: *const HAPI_Viewport,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetSessionSyncInfo(
        session: *const HAPI_Session,
        session_sync_info: *mut HAPI_SessionSyncInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetSessionSyncInfo(
        session: *const HAPI_Session,
        session_sync_info: *const HAPI_SessionSyncInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPDGGraphContexts(
        session: *const HAPI_Session,
        context_names_array: *mut HAPI_StringHandle,
        context_id_array: *mut HAPI_PDG_GraphContextId,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPDGGraphContextsCount(
        session: *const HAPI_Session,
        num_contexts: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPDGGraphContextId(
        session: *const HAPI_Session,
        top_node_id: HAPI_NodeId,
        context_id: *mut HAPI_PDG_GraphContextId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CookPDG(
        session: *const HAPI_Session,
        cook_node_id: HAPI_NodeId,
        generate_only: ::std::os::raw::c_int,
        blocking: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CookPDGAllOutputs(
        session: *const HAPI_Session,
        cook_node_id: HAPI_NodeId,
        generate_only: ::std::os::raw::c_int,
        blocking: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPDGEvents(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
        event_array: *mut HAPI_PDG_EventInfo,
        length: ::std::os::raw::c_int,
        event_count: *mut ::std::os::raw::c_int,
        remaining_events: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetPDGState(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
        pdg_state: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateWorkitem(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: *mut HAPI_PDG_WorkItemId,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemInfo(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
        workitem_id: HAPI_PDG_WorkItemId,
        workitem_info: *mut HAPI_PDG_WorkItemInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkitemIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        values_array: *const ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkitemFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        values_array: *const f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkitemStringData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        data_index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CommitWorkitems(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNumWorkitems(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        num: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitems(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_ids_array: *mut ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemDataLength(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemIntData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        data_array: *mut ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemFloatData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        data_array: *mut f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemStringData(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        data_name: *const ::std::os::raw::c_char,
        data_array: *mut HAPI_StringHandle,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkitemResultInfo(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        workitem_id: HAPI_PDG_WorkItemId,
        resultinfo_array: *mut HAPI_PDG_WorkItemOutputFile,
        resultinfo_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CreateWorkItem(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: *mut HAPI_PDG_WorkItemId,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemInfo(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
        work_item_id: HAPI_PDG_WorkItemId,
        work_item_info: *mut HAPI_PDG_WorkItemInfo,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkItemIntAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        values_array: *const ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkItemFloatAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        values_array: *const f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_SetWorkItemStringAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        data_index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CommitWorkItems(session: *const HAPI_Session, node_id: HAPI_NodeId) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetNumWorkItems(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        num: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItems(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_ids_array: *mut ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemAttributeSize(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemIntAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        data_array: *mut ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemFloatAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        data_array: *mut f32,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemStringAttribute(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        attribute_name: *const ::std::os::raw::c_char,
        data_array: *mut HAPI_StringHandle,
        length: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_GetWorkItemOutputFiles(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        work_item_id: HAPI_PDG_WorkItemId,
        resultinfo_array: *mut HAPI_PDG_WorkItemOutputFile,
        resultinfo_count: ::std::os::raw::c_int,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_DirtyPDGNode(
        session: *const HAPI_Session,
        node_id: HAPI_NodeId,
        clean_results: HAPI_Bool,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_PausePDGCook(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
    ) -> HapiResult;
}
extern "C" {
    pub fn HAPI_CancelPDGCook(
        session: *const HAPI_Session,
        graph_context_id: HAPI_PDG_GraphContextId,
    ) -> HapiResult;
}
